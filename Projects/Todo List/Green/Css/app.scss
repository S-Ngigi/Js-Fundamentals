/* 
    NOTE - The imports should be in the right order or there will be
    an error.
*/

// IMPORTING FUNCTIONS
@import "Partials/functions";
// IMPORTING VARIABLES
@import "Partials/variables";
// IMPORTING MIXINS
@import "Partials/mixins";
// We could also import in one line.
// @import "Partials/variables", "Partials/mixins";
// NORMAL CSS IMPORTS. CSS CAN ALREADY DO THIS. 
// @import url();
// @import "http://";
// @import "filename.css";
// @import "style-screen" screen;
// DECLARATION
// We can declare a mixin globally.
@include google-font("Nanum+Gothic");
@include google-font("Ubuntu");
@include fancy-links;
$contrast: high;
body {
    font-family: $text-font;
    font-size: toEm(20px); // We call our toEm function that converts our px to em.
    // SASS CONDITIONALS
    @if $contrast==high {
        color: #000;
    }
    @else if $contrast==low {
        color: #999;
    }
    @else {
        color: $text-color;
    }
    @include large-screens {
        font-size: 125%;
    }
}

h1,
h2,
h3,
h4 {
    font-family: $headline-font;
}

h2 {
    // Adding large text mixin to the h2 element.
    @include large-text;
}

p {
    font-family: $text-font;
}

a {
    color: $link-color; // Pseudo selecting
    &:hover {
        /* 
            The darken() darkens the initial arg by the second arg.
            This is an inbuilt sass function.
        */
        color: darken($link-color, 15%)
    }
}

//  Button element to add our mixin to.
.warning-button {
    // Including our mixin.
    @include warning;
    padding: 8px 12px; // Top and bottom...left and right.
}

// Example on Inheritance
.cta-button {
    @extend .warning-button;
    @include rounded(25px);
    font-weight: bold;
}

.mdl-tooltip {
    @include warning;
}

// Including our browser specific mixin.
@include apply-to-ie-6 {
    body {
        font-size: 125%;
    }
}

#header {
    /* 
        We can now add as many shadow arguments as we need because of
         how we set up our box-shadow mixin parameters 
    */
    @include box-shadow(2px 0px 4px #999, 1px 1px 6px $secondary-color);
    /* 
        Below we could leave this box mixin without a default because
        we have already set them.

        However say you wanted to update a either the radius or the
        border. To target the right parameter we would have to
        explicitly declare the parameter. So as to not trip them up.

        The advantage to the explicit declaration is that we dont
        have to worry about the order of the default. So we can begin
        with the border then declare the radius after.
    */
    @include box($border: 11px solid unqoute('#cccc'));
    height: $header-height;
    background-color: $theme-color;
    #main-menu {
        li {
            display: inline;
        }
        a {
            color: $menu-item-color;
            padding: 6px 8px;
            border-bottom: 1px solid transparentize(#fefefe, 1);
            transition: border-bottom 0.5s;
            transition-timing-function: ease-in-out;
            &:hover {
                border-bottom: 1px solid opacify($color: #fefefe, $amount: .5);
            }
        }
    }
    #logo {
        font-style: inherit;
    }
}

#main {
    width: $content-width;
    @include medium-screens {
        width: auto;
        max-width: $content-width;
    }
    margin-left: auto;
    margin-right: auto;
    #content {
        float: right;
        width: 6*$col;
    }
    #sidebar {
        float: left;
        width: 2*$col;
        li {
            list-style-type: none;
            padding: toEm(16px) toEm(20px);
            border-bottom: 1px dashed #999;
            &:hover {
                background-color: #efefef;
            }
        }
    }
}

#footer {
    clear: both;
    height: $footer-height;
    background: $ternary-color;
}

// INHERITANCE
.error {
    color: red;
}

/* 
    The critical error class can inherit styles from error class
    using the @extend

    - Note that we can have multiple extends directives allowing our
    class to inherit from multiple classes.

    - Also we can have chained inheritance whereby we another class
    can inherit from another class that has inherited attributes.
    

*/

.critical-error {
    @extend .error;
    bottom: 1px solid red;
    font-weight: bold;
}

// Chained inheritance. This is similar to inheritance hierarchy.
.super-cta-button {
    @extend .critical-error;
    @extend .error;
    font-size: em(20px);
}

/* 
NOTE
1. We cannot extend multiple element selector in a single line
2. We can not extend from a selector that is defined outside the
    media query only from within it. We can however extend a
    selector defined within a media query outside it
3. We also have extend only selectors that use %. No css is generated from these selectors and they are used for extending only.

*/

%highlight {
    font-style: italic;
    color: #000;
}

.sub-title {
    @extend %highlight;
    font-size: toPerc(20px);
}

/* 
    We use the !optional to continue with pre processing if some
    selector does not exist.
*/